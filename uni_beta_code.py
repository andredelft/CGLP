""" Edit from the cltk beta_to_unicode script, to do the reverse operation. Still problems with backslashes ('\'), open to investigate """
from cltk.corpus.greek.beta_to_unicode import Replacer
from cltk.corpus.utils.formatter import cltk_normalize
import string

UPPER = [
         # Perseus-style head words
         # CAPS smooth
         (r'*)A', 'Ἀ'),
         (r'*)E', 'Ἐ'),
         (r'*)H', 'Ἠ'),
         (r'*)I', 'Ἰ'),
         (r'*)O', 'Ὀ'),
         (r'*)W', 'Ὠ'),
         # CAPS rough
         (r'*(A', 'Ἁ'),
         (r'*(E', 'Ἑ'),
         (r'*(H', 'Ἡ'),
         (r'*(I', 'Ἱ'),
         (r'*(O', 'Ὁ'),
         (r'*(R', 'Ῥ'),
         (r'*(U', 'Ὑ'),
         (r'*(W', 'Ὡ'),
         # CAPS circumflex
         (r'*)=A', 'Ἆ'),
         (r'*)=H', 'Ἦ'),
         (r'*)=I', 'Ἶ'),
         (r'*)=W', 'Ὦ'),
         (r'*(=A', 'Ἇ'),
         (r'*(=H', 'Ἧ'),
         (r'*(=I', 'Ἷ'),
         (r'*(=U', 'Ὗ'),
         (r'*(=W', 'Ὧ'),
         # CAPS smooth grave
         ('*)\\A', 'Ἂ'),
         ('*)\\E', 'Ἒ'),
         ('*)\\H', 'Ἢ'),
         ('*)\\I', 'Ἲ'),
         ('*)\\O', 'Ὂ'),
         ('*)\\W', 'Ὢ'),
         # CAPS rough grave
         ('*(\\A', 'Ἃ'),
         ('*(\\E', 'Ἓ'),
         ('*(\\H', 'Ἣ'),
         ('*(\\I', 'Ἳ'),
         ('*(\\O', 'Ὃ'),
         ('*(\\U', 'Ὓ'),
         ('*(\\W', 'Ὣ'),
         # CAPS smooth acute
         (r'*)/A', 'Ἄ'),
         (r'*)/E', 'Ἔ'),
         (r'*)/H', 'Ἤ'),
         (r'*)/I', 'Ἴ'),
         (r'*)/O', 'Ὄ'),
         (r'*)/W', 'Ὤ'),
         # CAPS rough acute
         (r'*(/A', 'Ἅ'),
         (r'*(/E', 'Ἕ'),
         (r'*(/H', 'Ἥ'),
         (r'*(/I', 'Ἵ'),
         (r'*(/O', 'Ὅ'),
         (r'*(/U', 'Ὕ'),
         (r'*(/W', 'Ὥ'),
         # TLG-style
         ('*A\'', 'Ᾰ'),
         ('*I\'', 'Ῐ'),
         ('*U\'', 'Ῠ'),
         (r'*A&', 'Ᾱ'),
         (r'*I&', 'Ῑ'),
         (r'*U&', 'Ῡ'),
         (r'*R(', 'Ῥ'),
         (r'*A)|', 'ᾈ'),
         (r'*A(|', 'ᾉ'),
         (r'*A)\|', 'ᾊ'),
         (r'*A(\|', 'ᾋ'),
         (r'*A)/|', 'ᾌ'),
         (r'*A(/|', 'ᾍ'),
         (r'*A)=|', 'ᾎ'),
         (r'*A(=|', 'ᾏ'),
         (r'*H)|', 'ᾘ'),
         (r'*H(|', 'ᾙ'),
         (r'*H)\|', 'ᾚ'),
         (r'*H(\|', 'ᾛ'),
         (r'*H)/|', 'ᾜ'),
         (r'*H(/|', 'ᾝ'),
         (r'*H)=|', 'ᾞ'),
         (r'*H(=|', 'ᾟ'),
         (r'*)|', 'ᾨ'),
         (r'*(|', 'ᾩ'),
         (r'*)\|', 'ᾪ'),
         (r'*(\|', 'ᾫ'),
         (r'*)/|', 'ᾬ'),
         (r'*(/|', 'ᾭ'),
         (r'*)=|', 'ᾮ'),
         (r'*(=|', 'ᾯ'),
         ('*A)\\', 'Ἂ'),
         ('*A(\\', 'Ἃ'),
         ('*E)\\', 'Ἒ'),
         ('*E(\\', 'Ἓ'),
         ('*H)\\', 'Ἢ'),
         ('*H(\\', 'Ἣ'),
         ('*I)\\', 'Ἲ'),
         ('*I(\\', 'Ἳ'),
         ('*O)\\', 'Ὂ'),
         ('*O(\\', 'Ὃ'),
         ('*U(\\', 'Ὓ'),
         ('*W)\\', 'Ὢ'),
         ('*W(\\', 'Ὣ'),
         (r'*A)/', 'Ἄ'),
         (r'*A(/', 'Ἅ'),
         (r'*E)/', 'Ἔ'),
         (r'*E(/', 'Ἕ'),
         (r'*H)/', 'Ἤ'),
         (r'*H(/', 'Ἥ'),
         (r'*I)/', 'Ἴ'),
         (r'*I(/', 'Ἵ'),
         (r'*O)/', 'Ὄ'),
         (r'*O(/', 'Ὅ'),
         (r'*U(/', 'Ὕ'),
         (r'*W)/', 'Ὤ'),
         (r'*W(/', 'Ὥ'),
         (r'*A)=', 'Ἆ'),
         (r'*A(=', 'Ἇ'),
         (r'*H)=', 'Ἦ'),
         (r'*H(=', 'Ἧ'),
         (r'*I)=', 'Ἶ'),
         (r'*I(=', 'Ἷ'),
         (r'*U(=', 'Ὗ'),
         (r'*W)=', 'Ὦ'),
         (r'*W(=', 'Ὧ'),
         (r'*A=', 'Ἆ'),
         (r'*H=', 'Ἦ'),
         (r'*I=', 'Ἶ'),
         (r'*W=', 'Ὦ'),
         (r'*A)', 'Ἀ'),
         (r'*A(', 'Ἁ'),
         (r'*E)', 'Ἐ'),
         (r'*E(', 'Ἑ'),
         (r'*H)', 'Ἠ'),
         (r'*H(', 'Ἡ'),
         (r'*I)', 'Ἰ'),
         (r'*I(', 'Ἱ'),
         (r'*O)', 'Ὀ'),
         (r'*O(', 'Ὁ'),
         (r'*U(', 'Ὑ'),
         (r'*W)', 'Ὠ'),
         (r'*W(', 'Ὡ'),
         (r'*A', 'Α'),
         (r'*B', 'Β'),
         (r'*C', 'Ξ'),
         (r'*D', 'Δ'),
         (r'*E', 'Ε'),
         (r'*F', 'Φ'),
         (r'*G', 'Γ'),
         (r'*H', 'Η'),
         (r'*I', 'Ι'),
         (r'*K', 'Κ'),
         (r'*L', 'Λ'),
         (r'*M', 'Μ'),
         (r'*N', 'Ν'),
         (r'*O', 'Ο'),
         (r'*P', 'Π'),
         (r'*Q', 'Θ'),
         (r'*R', 'Ρ'),
         (r'*S', 'Σ'),
         (r'*T', 'Τ'),
         (r'*U', 'Υ'),
         (r'*V', 'Ϝ'),
         (r'*W', 'Ω'),
         (r'*X', 'Χ'),
         (r'*Y', 'Ψ'),
         (r'*Z', 'Ζ'),
         ]

LOWER = [
         (r'I+', 'ϊ'),
         (r'I\+', 'ῒ'),
         (r'I/+', 'ΐ'),
         (r'I=+', 'ῗ'),
         (r'U+', 'ϋ'),
         (r'U\+', 'ῢ'),
         (r'U/+', 'ΰ'),
         (r'U=+', 'ῧ'),
         ('A\'', 'ᾰ'),
         ('I\'', 'ῐ'),
         ('U\'', 'ῠ'),
         (r'A&', 'ᾱ'),
         (r'I&', 'ῑ'),
         (r'U&', 'ῡ'),
         (r'R)', 'ῤ'),
         (r'R(', 'ῥ'),
         (r'A)|', 'ᾀ'),
         (r'A(|', 'ᾁ'),
         (r'A)\|', 'ᾂ'),
         (r'A(\|', 'ᾃ'),
         (r'A)/|', 'ᾄ'),
         (r'A(/|', 'ᾅ'),
         (r'A)=|', 'ᾆ'),
         (r'A(=|', 'ᾇ'),
         (r'H)|', 'ᾐ'),
         (r'H(|', 'ᾑ'),
         (r'H)\|', 'ᾒ'),
         (r'H(\|', 'ᾓ'),
         (r'H)/|', 'ᾔ'),
         (r'H(/|', 'ᾕ'),
         (r'H)=|', 'ᾖ'),
         (r'H(=|', 'ᾗ'),
         (r'W)|', 'ᾠ'),
         (r'W(|', 'ᾡ'),
         (r'W)\|', 'ᾢ'),
         (r'W(\|', 'ᾣ'),
         (r'W)/|', 'ᾤ'),
         (r'W(/|', 'ᾥ'),
         (r'W)=|', 'ᾦ'),
         (r'W(=|', 'ᾧ'),
         (r'A\|', 'ᾲ'),
         (r'A|', 'ᾳ'),
         (r'A/|', 'ᾴ'),
         (r'A=|', 'ᾷ'),
         (r'H\|', 'ῂ'),
         (r'H|', 'ῃ'),
         (r'H/|', 'ῄ'),
         (r'H=|', 'ῇ'),
         (r'W\|', 'ῲ'),
         (r'W|', 'ῳ'),
         (r'W/|', 'ῴ'),
         (r'W=|', 'ῷ'),
         ('A)\\', 'ἂ'),
         ('A(\\', 'ἃ'),
         ('E)\\', 'ἒ'),
         ('E(\\', 'ἓ'),
         ('H)\\', 'ἢ'),
         ('H(\\', 'ἣ'),
         ('I)\\', 'ἲ'),
         ('I(\\', 'ἳ'),
         ('O)\\', 'ὂ'),
         ('O(\\', 'ὃ'),
         ('U)\\', 'ὒ'),
         ('U(\\', 'ὓ'),
         ('W)\\', 'ὢ'),
         ('W(\\', 'ὣ'),
         (r'A)/', 'ἄ'),
         (r'A(/', 'ἅ'),
         (r'E)/', 'ἔ'),
         (r'E(/', 'ἕ'),
         (r'H)/', 'ἤ'),
         (r'H(/', 'ἥ'),
         (r'I)/', 'ἴ'),
         (r'I(/', 'ἵ'),
         (r'O)/', 'ὄ'),
         (r'O(/', 'ὅ'),
         (r'U)/', 'ὔ'),
         (r'U(/', 'ὕ'),
         (r'W)/', 'ὤ'),
         (r'W(/', 'ὥ'),
         (r'A)=', 'ἆ'),
         (r'A(=', 'ἇ'),
         (r'H)=', 'ἦ'),
         (r'H(=', 'ἧ'),
         (r'I)=', 'ἶ'),
         (r'I(=', 'ἷ'),
         (r'U)=', 'ὖ'),
         (r'U(=', 'ὗ'),
         (r'W)=', 'ὦ'),
         (r'W(=', 'ὧ'),
         (r'A=', 'ᾶ'),
         (r'H=', 'ῆ'),
         (r'I=', 'ῖ'),
         (r'U=', 'ῦ'),
         (r'W=', 'ῶ'),
         (r'A)', 'ἀ'),
         (r'A(', 'ἁ'),
         (r'E)', 'ἐ'),
         (r'E(', 'ἑ'),
         (r'H)', 'ἠ'),
         (r'H(', 'ἡ'),
         (r'I)', 'ἰ'),
         (r'I(', 'ἱ'),
         (r'O)', 'ὀ'),
         (r'O(', 'ὁ'),
         (r'U)', 'ὐ'),
         (r'U(', 'ὑ'),
         (r'W)', 'ὠ'),
         (r'W(', 'ὡ'),
         ('A\\', 'ὰ'),
         (r'A/', 'ά'),
         (r'E/', 'έ'),
         ('E\\', 'ὲ'),
         (r'H/', 'ή'),
         ('H\\', 'ὴ'),
         (r'I/', 'ί'),
         ('I\\', 'ὶ'),
         (r'O/', 'ό'),
         ('O\\', 'ὸ'),
         (r'U/', 'ύ'),
         ('U\\', 'ὺ'),
         (r'W/', 'ώ'),
         ('W\\', 'ὼ'),
         (r'A', 'α'),
         (r'B', 'β'),
         (r'C', 'ξ'),
         (r'D', 'δ'),
         (r'E', 'ε'),
         (r'F', 'φ'),
         (r'G', 'γ'),
         (r'H', 'η'),
         (r'I', 'ι'),
         (r'K', 'κ'),
         (r'L', 'λ'),
         (r'M', 'μ'),
         (r'N', 'ν'),
         (r'O', 'ο'),
         (r'P', 'π'),
         (r'Q', 'θ'),
         (r'R', 'ρ'),
         (r'S', 'σ'),
         (r'S', 'ς'),
         (r'T', 'τ'),
         (r'U', 'υ'),
         (r'V', 'ϝ'),
         (r'W', 'ω'),
         (r'X', 'χ'),
         (r'Y', 'ψ'),
         (r'Z', 'ζ'),
         
         #Alternative unicodes:
#         (r'A/', 'ά'),
#         (r'E/', 'έ'),
#         (r'H/', 'ή'),
#         (r'O/', 'ό'),
#         (r'I/', 'ί'),
#         (r'U/', 'ύ')
]

dict = {}
for character in UPPER:
         dict[ord(character[1])] = character[0]
for character in LOWER:
         dict[ord(character[1])] = character[0]

def uni2beta(text_uni):
         text_uni = cltk_normalize(text_uni)
         text_beta = text_uni.translate(dict)
         text_beta = text_beta.translate(str.maketrans(string.ascii_uppercase,string.ascii_lowercase))
         return text_beta

def beta2uni(text_beta):
         text_beta = text_beta.translate(str.maketrans(string.ascii_lowercase,string.ascii_uppercase))
         text_uni = Replacer().beta_code(text_beta)
         return text_uni
